#!/bin/bash

# This scrips updates all the Rainbow scripts in the system
# - Delete potentially old files
# - Copy new files in the appropriate directories
#
# It works on the assumption that someone has already downloaded the git repo
#  with all the updated files
#
#
# Part of the RainbowScripts suite

# Check for root execution
check_for_root() {
  if [ $EUID -ne 0 ]; then
    output_message "This script must be run as root" 
    exit 1
  fi
}


# Show a message
output_message() {
  echo ${1}
}

# Copy a file to a particular location
# Param 1 is the file name
# Param 2 is the destination
copy_file() {
  #echo " -> Copy ${1} to ${2}"
  cp "${1}" "${2}"
}

# Copy a file to a particular location and set executable flag
# Param 1 is the file name
# Param 2 is the destination
copy_exec_file() {
	local source="${1}"
	local destination="${2}"

  chmod +x "${source}"
  copy_file "${source}" "${destination}"
}

# Copy a file to a particular location and change its permissions.
#  Generally used for configuration files.
# Param 1 is the file name
# Param 2 is the destination
copy_config_file() {
	local source="${1}"
	local destination="${2}"

  chmod 640 "${source}"
  copy_file "${source}" "${destination}"
}

# Copy a file to a particular location and change its permissions.
#  Generally used for service files.
# Param 1 is the file name
# Param 2 is the destination
copy_service_file() {
	local source="${1}"
	local destination="${2}"

  chmod 644 "${source}"
  copy_file "${source}" "${destination}"
}

# Update RainbowScripts
update_scripts() {
  # Get the script path
  local base_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" > /dev/null 2>&1 && pwd )"
  #Get the parent folder
  local base_dir="$(dirname "${base_dir}")"

  # Expand some strings, in particular $NAME, to get the OS name
  local os_name="$( . /etc/os-release && printf '%s\n' "$NAME" )"

  # Copy the files where they need to be copied
  output_message "Installing / Updating RainbowScripts on ${os_name}..."
  # Why /usr/local/bin?
  #   https://unix.stackexchange.com/questions/8656/usr-bin-vs-usr-local-bin-on-linux
  #   /usr/local/bin is for normal user programs not managed by the distribution package manager, e.g. locally compiled packages
  #   /usr/local/sbin is for system management programs (not normally used by ordinary users)
  local bin_dir="/usr/local/bin/"

  # Remove old .sh files, a legacy from the past
  # outputmessage "Removing old files"
  # [ -f "${bin_dir}rainbow-notifyadmin.sh" ] &&  rm "${bin_dir}rainbow-notifyadmin.sh"
  # [ -f "${bin_dir}rainbow-updater.sh" ] &&  rm "${bin_dir}rainbow-updater.sh"
  # [ -f "${bin_dir}rainbow-upgradesystem.sh" ] &&  rm "${bin_dir}rainbow-upgradesystem.sh"
  # [ -f "${bin_dir}rainbow-backupnas.sh" ] &&  rm "${bin_dir}rainbow-backupnas.sh"
  # [ -f "${bin_dir}rainbow-sshloginnotify.sh" ] &&  rm "${bin_dir}rainbow-sshloginnotify.sh"

  case "${os_name}" in 
  *Alpine*)
    output_message "  >> No systemd services available in ${os_name}"
    ;;
  *)
    output_message "Stopping systemd services"
    systemctl stop rainbow-monitoragent.service
    systemctl disable rainbow-monitoragent.service
    ;;
  esac

  cd ${base_dir}

  # Copy scripts
  copy_exec_file "scripts/rainbow-backupnas" "${bin_dir}"
  copy_exec_file "scripts/rainbow-checkhosts" "${bin_dir}"
  copy_exec_file "scripts/rainbow-notifyadmin" "${bin_dir}"
  copy_exec_file "scripts/rainbow-notifytelegram" "${bin_dir}"
  copy_exec_file "scripts/rainbow-updater" "${bin_dir}"
  copy_exec_file "scripts/rainbow-upgradesystem" "${bin_dir}"
  copy_exec_file "scripts/rainbow-sshloginnotify" "${bin_dir}"
  copy_file "scripts/rainbow-monitoragent.py" "${bin_dir}"
   
  # Copy daily cron jobs
  if [ -d "/etc/cron.daily" ]; then
    # Debian / Ubuntu
    local cron_daily_dir="/etc/cron.daily/"
  else
    # Alpine
    local cron_daily_dir="/etc/periodic/daily/"
  fi
  copy_exec_file "scripts/cron/rainbow-cron-packages" "${cron_daily_dir}"
  copy_exec_file "scripts/cron/rainbow-cron-updater" "${cron_daily_dir}"

  # Copy time-specific cron jobs
  local cron_d_dir="/etc/cron.d/"
  # Maybe it's not really necessary, altought https://unix.stackexchange.com/a/296351
  copy_config_file "scripts/cron/rainbow-cron-backupnas" "${cron_d_dir}"
  copy_config_file "scripts/cron/rainbow-cron-checkhosts" "${cron_d_dir}"

  # Copy systemd services
  # At the moment, it works only for debian-based systems
  case "${os_name}" in 
  *Alpine*)
    ;;
  *)
    local systemd_dir="/etc/systemd/system/"
    copy_service_file "scripts/systemd/rainbow-monitoragent.service" "${systemd_dir}"
    ;;
  esac

  # Create the config folder, if necessary
  local config_folder="/etc/rainbowscripts"
  if [ ! -d "${config_folder}" ]; then
    output_message "Creating config folder"
    mkdir "${config_folder}"
  fi

  # Copy configuration files if they don't already exist
  for config_source_file in "notifyadmin.conf" "notifytelegram.conf" "backupnas.conf" "backupnas-include.conf" "checkhosts.conf"
  do
    local config_dest_file="${config_folder}/${config_source_file}"
    if [ ! -f ${config_dest_file} ]; then
      copy_config_file "scripts/conf/${config_source_file}" "${config_dest_file}"
      output_message " --> Before running the scripts, please edit config on ${config_dest_file}, adding your values <--" 
    fi
  done

  # Refresh the services
  # At the moment, it works only for debian-based systems
  # At the moment, it works only for debian-based systems
  case "${os_name}" in 
  *Alpine*)
    ;;
  *)
    output_message "Restart systemd services"
    systemctl daemon-reload
    # Start the service at every boot
    systemctl enable rainbow-monitoragent.service
    # Start the service now
    systemctl start rainbow-monitoragent.service
    ;;
  esac

  cd - > /dev/null 2>&1
  output_message "RainbowScripts updated to the latest version"
}

# Check if the command was launched using root permissions
check_for_root
update_scripts

